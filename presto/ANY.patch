diff -ruBw ../presto/presto-main/src/main/java/com/facebook/presto/metadata/OperatorType.java ../presto-main/src/main/java/com/facebook/presto/metadata/OperatorType.java
--- ../presto/presto-main/src/main/java/com/facebook/presto/metadata/OperatorType.java	2016-03-17 10:54:46.000000000 -0400
+++ ../presto-main/src/main/java/com/facebook/presto/metadata/OperatorType.java	2016-03-07 16:46:04.000000000 -0500
@@ -131,6 +131,15 @@
                 }
             },
 
+    ANY("ANY")
+            {
+                @Override
+                void validateSignature(TypeSignature returnType, List<TypeSignature> argumentTypes)
+                {
+                    validateComparisonOperatorSignature(this, returnType, argumentTypes, 2);
+                }
+            },
+
     BETWEEN("BETWEEN")
             {
                 @Override
diff -ruBw ../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayFunctions.java ../presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayFunctions.java
--- ../presto/presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayFunctions.java	2016-03-17 10:54:46.000000000 -0400
+++ ../presto-main/src/main/java/com/facebook/presto/operator/scalar/ArrayFunctions.java	2016-03-07 16:46:04.000000000 -0500
@@ -13,12 +13,27 @@
  */
 package com.facebook.presto.operator.scalar;
 
+import com.facebook.presto.spi.PrestoException;
 import com.facebook.presto.spi.block.Block;
 import com.facebook.presto.spi.block.BlockBuilder;
 import com.facebook.presto.spi.block.BlockBuilderStatus;
+import com.facebook.presto.spi.type.BigintType;
+import com.facebook.presto.spi.type.BooleanType;
+import com.facebook.presto.spi.type.DateType;
+import com.facebook.presto.spi.type.DoubleType;
+import com.facebook.presto.spi.type.StandardTypes;
+import com.facebook.presto.spi.type.TimeType;
+import com.facebook.presto.spi.type.TimestampType;
+import com.facebook.presto.spi.type.Type;
+import com.facebook.presto.spi.type.VarbinaryType;
+import com.facebook.presto.spi.type.VarcharType;
 import com.facebook.presto.type.ArrayType;
 import com.facebook.presto.type.SqlType;
+import com.google.common.base.Throwables;
+import io.airlift.slice.Slice;
 
+import static com.facebook.presto.metadata.OperatorType.ANY;
+import static com.facebook.presto.spi.StandardErrorCode.INTERNAL_ERROR;
 import static com.facebook.presto.type.UnknownType.UNKNOWN;
 
 public final class ArrayFunctions
@@ -34,4 +49,220 @@
         BlockBuilder blockBuilder = new ArrayType(UNKNOWN).createBlockBuilder(new BlockBuilderStatus(), 0);
         return blockBuilder.build();
     }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyBigint(@SqlType(StandardTypes.BIGINT) long left, @SqlType("array<bigint>") Block right)
+    {
+        return contains(BigintType.BIGINT, right, left);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyBigint(@SqlType("array<bigint>") Block left, @SqlType(StandardTypes.BIGINT) long right)
+    {
+        return contains(BigintType.BIGINT, left, right);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyBoolean(@SqlType(StandardTypes.BOOLEAN) boolean left, @SqlType("array<boolean>") Block right)
+    {
+        return contains(BooleanType.BOOLEAN, right, left);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyBoolean(@SqlType("array<boolean>") Block left, @SqlType(StandardTypes.BOOLEAN) boolean right)
+    {
+        return contains(BooleanType.BOOLEAN, left, right);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyDate(@SqlType(StandardTypes.DATE) long left, @SqlType("array<date>") Block right)
+    {
+        return contains(DateType.DATE, right, left);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyDate(@SqlType("array<date>") Block left, @SqlType(StandardTypes.DATE) long right)
+    {
+        return contains(DateType.DATE, left, right);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyDouble(@SqlType(StandardTypes.DOUBLE) double left, @SqlType("array<double>") Block right)
+    {
+        return contains(DoubleType.DOUBLE, right, left);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyDouble(@SqlType("array<double>") Block left, @SqlType(StandardTypes.DOUBLE) double right)
+    {
+        return contains(DoubleType.DOUBLE, left, right);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyTime(@SqlType(StandardTypes.TIME) long left, @SqlType("array<time>") Block right)
+    {
+        return contains(TimeType.TIME, right, left);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyTime(@SqlType("array<time>") Block left, @SqlType(StandardTypes.TIME) long right)
+    {
+        return contains(TimeType.TIME, left, right);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyTimestamp(@SqlType(StandardTypes.TIMESTAMP) long left, @SqlType("array<timestamp>") Block right)
+    {
+        return contains(TimestampType.TIMESTAMP, right, left);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyTimestamp(@SqlType("array<timestamp>") Block left, @SqlType(StandardTypes.TIMESTAMP) long right)
+    {
+        return contains(TimestampType.TIMESTAMP, left, right);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyVarbinary(@SqlType(StandardTypes.VARBINARY) Slice left, @SqlType("array<varbinary>") Block right)
+    {
+        return contains(VarbinaryType.VARBINARY, right, left);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyVarbinary(@SqlType("array<varbinary>") Block left, @SqlType(StandardTypes.VARBINARY) Slice right)
+    {
+        return contains(VarbinaryType.VARBINARY, left, right);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyVarchar(@SqlType(StandardTypes.VARCHAR) Slice left, @SqlType("array<varchar>") Block right)
+    {
+        return contains(VarcharType.VARCHAR, right, left);
+    }
+
+    @ScalarOperator(ANY)
+    @SqlType(StandardTypes.BOOLEAN)
+    public static boolean anyVarchar(@SqlType("array<varchar>") Block left, @SqlType(StandardTypes.VARCHAR) Slice right)
+    {
+        return contains(VarcharType.VARCHAR, left, right);
+    }
+
+    private static Boolean contains(Type elementType, Block arrayBlock, boolean value)
+    {
+        boolean foundNull = false;
+        for (int i = 0; i < arrayBlock.getPositionCount(); i++) {
+            if (arrayBlock.isNull(i)) {
+                foundNull = true;
+                continue;
+            }
+            try {
+                if (elementType.getBoolean(arrayBlock, i) == value) {
+                    return true;
+                }
+            }
+            catch (Throwable t) {
+                Throwables.propagateIfInstanceOf(t, Error.class);
+                Throwables.propagateIfInstanceOf(t, PrestoException.class);
+
+                throw new PrestoException(INTERNAL_ERROR, t);
+            }
+        }
+        if (foundNull) {
+            return null;
+        }
+        return false;
+    }
+
+    private static Boolean contains(Type elementType, Block arrayBlock, double value)
+    {
+        boolean foundNull = false;
+        for (int i = 0; i < arrayBlock.getPositionCount(); i++) {
+            if (arrayBlock.isNull(i)) {
+                foundNull = true;
+                continue;
+            }
+            try {
+                if (elementType.getDouble(arrayBlock, i) == value) {
+                    return true;
+                }
+            }
+            catch (Throwable t) {
+                Throwables.propagateIfInstanceOf(t, Error.class);
+                Throwables.propagateIfInstanceOf(t, PrestoException.class);
+
+                throw new PrestoException(INTERNAL_ERROR, t);
+            }
+        }
+        if (foundNull) {
+            return null;
+        }
+        return false;
+    }
+
+    private static Boolean contains(Type elementType, Block arrayBlock, long value)
+    {
+        boolean foundNull = false;
+        for (int i = 0; i < arrayBlock.getPositionCount(); i++) {
+            if (arrayBlock.isNull(i)) {
+                foundNull = true;
+                continue;
+            }
+            try {
+                if (elementType.getLong(arrayBlock, i) == value) {
+                    return true;
+                }
+            }
+            catch (Throwable t) {
+                Throwables.propagateIfInstanceOf(t, Error.class);
+                Throwables.propagateIfInstanceOf(t, PrestoException.class);
+
+                throw new PrestoException(INTERNAL_ERROR, t);
+            }
+        }
+        if (foundNull) {
+            return null;
+        }
+        return false;
+    }
+
+    private static Boolean contains(Type elementType, Block arrayBlock, Slice value)
+    {
+        boolean foundNull = false;
+        for (int i = 0; i < arrayBlock.getPositionCount(); i++) {
+            if (arrayBlock.isNull(i)) {
+                foundNull = true;
+                continue;
+            }
+            try {
+                if (elementType.getSlice(arrayBlock, i).equals(value)) {
+                    return true;
+                }
+            }
+            catch (Throwable t) {
+                Throwables.propagateIfInstanceOf(t, Error.class);
+                Throwables.propagateIfInstanceOf(t, PrestoException.class);
+
+                throw new PrestoException(INTERNAL_ERROR, t);
+            }
+        }
+        if (foundNull) {
+            return null;
+        }
+        return false;
+    }
 }
diff -ruBw ../presto/presto-main/src/main/java/com/facebook/presto/sql/ExpressionUtils.java ../presto-main/src/main/java/com/facebook/presto/sql/ExpressionUtils.java
--- ../presto/presto-main/src/main/java/com/facebook/presto/sql/ExpressionUtils.java	2016-03-17 10:54:46.000000000 -0400
+++ ../presto-main/src/main/java/com/facebook/presto/sql/ExpressionUtils.java	2016-03-07 16:46:04.000000000 -0500
@@ -37,6 +37,7 @@
 
 import static com.facebook.presto.sql.tree.BooleanLiteral.FALSE_LITERAL;
 import static com.facebook.presto.sql.tree.BooleanLiteral.TRUE_LITERAL;
+import static com.facebook.presto.sql.tree.ComparisonExpression.Type.ANY;
 import static com.facebook.presto.sql.tree.ComparisonExpression.Type.EQUAL;
 import static com.facebook.presto.sql.tree.ComparisonExpression.Type.GREATER_THAN;
 import static com.facebook.presto.sql.tree.ComparisonExpression.Type.GREATER_THAN_OR_EQUAL;
@@ -190,6 +191,8 @@
                 return LESS_THAN_OR_EQUAL;
             case IS_DISTINCT_FROM:
                 return IS_DISTINCT_FROM;
+            case ANY:
+                return ANY;
             default:
                 throw new IllegalArgumentException("Unsupported comparison: " + type);
         }
diff -ruBw ../presto/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ../presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java
--- ../presto/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java	2016-03-17 10:54:46.000000000 -0400
+++ ../presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java	2016-03-07 16:46:04.000000000 -0500
@@ -390,6 +390,9 @@
             if (node.getType() == ComparisonExpression.Type.IS_DISTINCT_FROM) {
                 operatorType = OperatorType.EQUAL;
             }
+            else if (node.getType() == ComparisonExpression.Type.ANY) {
+                operatorType = OperatorType.ANY;
+            }
             else {
                 operatorType = OperatorType.valueOf(node.getType().name());
             }
diff -ruBw ../presto/presto-main/src/main/java/com/facebook/presto/sql/planner/DomainTranslator.java ../presto-main/src/main/java/com/facebook/presto/sql/planner/DomainTranslator.java
--- ../presto/presto-main/src/main/java/com/facebook/presto/sql/planner/DomainTranslator.java	2016-03-17 10:54:46.000000000 -0400
+++ ../presto-main/src/main/java/com/facebook/presto/sql/planner/DomainTranslator.java	2016-03-07 16:46:04.000000000 -0500
@@ -23,6 +23,7 @@
 import com.facebook.presto.spi.predicate.Ranges;
 import com.facebook.presto.spi.predicate.TupleDomain;
 import com.facebook.presto.spi.predicate.ValueSet;
+import com.facebook.presto.spi.type.StandardTypes;
 import com.facebook.presto.spi.type.Type;
 import com.facebook.presto.sql.analyzer.ExpressionAnalyzer;
 import com.facebook.presto.sql.parser.SqlParser;
@@ -102,6 +103,20 @@
             return domain.isNullAllowed() ? new IsNullPredicate(reference) : FALSE_LITERAL;
         }
 
+        if (domain.getValues().isAny()) {
+            List<Expression> disjuncts = new ArrayList<>();
+            for (Object s : domain.getValues().getDiscreteValues().getValues()) {
+                Expression e = new ComparisonExpression(ComparisonExpression.Type.ANY, toExpression(s, domain.getType()), reference);
+                if (!domain.getValues().getDiscreteValues().isWhiteList()) {
+                    disjuncts.add(new NotExpression(e));
+                }
+                else {
+                    disjuncts.add(e);
+                }
+            }
+            return combineDisjunctsWithDefault(disjuncts, TRUE_LITERAL);
+        }
+
         if (domain.getValues().isAll()) {
             return domain.isNullAllowed() ? TRUE_LITERAL : new NotExpression(new IsNullPredicate(reference));
         }
@@ -360,7 +375,26 @@
             if (value.getType().equals(BIGINT) && type.equals(DOUBLE)) {
                 value = NullableValue.of(DOUBLE, ((Long) value.getValue()).doubleValue());
             }
+
+            if (node.getType().equals(ComparisonExpression.Type.ANY)) {
+                if (type.getTypeSignature().getBase().equals(StandardTypes.ARRAY)) {
+                    Type elementType = type.getTypeParameters().get(0);
+                    checkState(value.isNull() || value.getType().equals(elementType), "INVARIANT: ANY comparison array element type must be the same as value");
+                    return createComparisonExtractionResult(normalized.getComparisonType(), symbol, elementType, value.getValue(), complement);
+                }
+                else if (value.getType().getTypeSignature().getBase().equals(StandardTypes.ARRAY))  {
+                    Type elementType = value.getType().getTypeParameters().get(0);
+                    checkState(value.isNull() || type.equals(elementType), "INVARIANT: ANY comparison array element type must be the same as value");
+                    return createComparisonExtractionResult(normalized.getComparisonType(), symbol, value.getType(), value.getValue(), complement);
+                }
+                else {
+                    throw new IllegalStateException("INVARIANT: ANY comparison array element type must be the same as value");
+                }
+            }
+            else {
             checkState(value.isNull() || value.getType().equals(type), "INVARIANT: comparison should be working on the same types");
+            }
+
             return createComparisonExtractionResult(normalized.getComparisonType(), symbol, type, value.getValue(), complement);
         }
 
@@ -407,6 +441,8 @@
         {
             checkArgument(value != null);
             switch (comparisonType) {
+                case ANY:
+                    return Domain.create(complementIfNecessary(ValueSet.any(type, value), complement), false);
                 case EQUAL:
                     return Domain.create(complementIfNecessary(ValueSet.ofRanges(Range.equal(type, value)), complement), false);
                 case GREATER_THAN:
@@ -431,6 +467,8 @@
         {
             checkArgument(value != null);
             switch (comparisonType) {
+                case ANY:
+                    return Domain.create(complementIfNecessary(ValueSet.any(type, value), complement), false);
                 case EQUAL:
                     return Domain.create(complementIfNecessary(ValueSet.of(type, value), complement), false);
                 case NOT_EQUAL:
diff -ruBw ../presto/presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4 ../presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4
--- ../presto/presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4	2016-03-17 10:54:46.000000000 -0400
+++ ../presto-parser/src/main/antlr4/com/facebook/presto/sql/parser/SqlBase.g4	2016-03-07 16:46:04.000000000 -0500
@@ -224,6 +224,7 @@
     | NOT? LIKE pattern=valueExpression (ESCAPE escape=valueExpression)?  #like
     | IS NOT? NULL                                                        #nullPredicate
     | IS NOT? DISTINCT FROM right=valueExpression                         #distinctFrom
+    | NOT? ANY right=valueExpression                                      #any
     ;
 
 valueExpression
diff -ruBw ../presto/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java ../presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java
--- ../presto/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java	2016-03-17 10:54:46.000000000 -0400
+++ ../presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java	2016-03-07 16:46:04.000000000 -0500
@@ -688,6 +688,22 @@
     }
 
     @Override
+    public Node visitAny(SqlBaseParser.AnyContext context)
+    {
+        Expression expression = new ComparisonExpression(
+                getLocation(context),
+                ComparisonExpression.Type.ANY,
+                (Expression) visit(context.value),
+                (Expression) visit(context.right));
+
+        if (context.NOT() != null) {
+            expression = new NotExpression(getLocation(context), expression);
+        }
+
+        return expression;
+    }
+
+    @Override
     public Node visitBetween(SqlBaseParser.BetweenContext context)
     {
         Expression expression = new BetweenPredicate(
diff -ruBw ../presto/presto-parser/src/main/java/com/facebook/presto/sql/tree/ComparisonExpression.java ../presto-parser/src/main/java/com/facebook/presto/sql/tree/ComparisonExpression.java
--- ../presto/presto-parser/src/main/java/com/facebook/presto/sql/tree/ComparisonExpression.java	2016-03-17 10:54:46.000000000 -0400
+++ ../presto-parser/src/main/java/com/facebook/presto/sql/tree/ComparisonExpression.java	2016-03-07 16:46:04.000000000 -0500
@@ -28,7 +28,8 @@
         LESS_THAN_OR_EQUAL("<="),
         GREATER_THAN(">"),
         GREATER_THAN_OR_EQUAL(">="),
-        IS_DISTINCT_FROM("IS DISTINCT FROM");
+        IS_DISTINCT_FROM("IS DISTINCT FROM"),
+        ANY("ANY");
 
         private final String value;
 
diff -ruBw ../presto/presto-spi/src/main/java/com/facebook/presto/spi/predicate/AllOrNoneValueSet.java ../presto-spi/src/main/java/com/facebook/presto/spi/predicate/AllOrNoneValueSet.java
--- ../presto/presto-spi/src/main/java/com/facebook/presto/spi/predicate/AllOrNoneValueSet.java	2016-03-17 10:48:43.000000000 -0400
+++ ../presto-spi/src/main/java/com/facebook/presto/spi/predicate/AllOrNoneValueSet.java	2016-03-07 16:46:04.000000000 -0500
@@ -64,6 +64,12 @@
     }
 
     @Override
+    public boolean isAny()
+    {
+        return false;
+    }
+
+    @Override
     @JsonProperty
     public boolean isAll()
     {
Only in ../presto-spi/src/main/java/com/facebook/presto/spi/predicate: AnyValueSet.java
diff -ruBw ../presto/presto-spi/src/main/java/com/facebook/presto/spi/predicate/EquatableValueSet.java ../presto-spi/src/main/java/com/facebook/presto/spi/predicate/EquatableValueSet.java
--- ../presto/presto-spi/src/main/java/com/facebook/presto/spi/predicate/EquatableValueSet.java	2016-03-17 10:48:43.000000000 -0400
+++ ../presto-spi/src/main/java/com/facebook/presto/spi/predicate/EquatableValueSet.java	2016-03-07 16:46:04.000000000 -0500
@@ -126,6 +126,12 @@
     }
 
     @Override
+    public boolean isAny()
+    {
+        return false;
+    }
+
+    @Override
     public boolean isAll()
     {
         return !whiteList && entries.isEmpty();
diff -ruBw ../presto/presto-spi/src/main/java/com/facebook/presto/spi/predicate/SortedRangeSet.java ../presto-spi/src/main/java/com/facebook/presto/spi/predicate/SortedRangeSet.java
--- ../presto/presto-spi/src/main/java/com/facebook/presto/spi/predicate/SortedRangeSet.java	2016-03-17 10:48:43.000000000 -0400
+++ ../presto-spi/src/main/java/com/facebook/presto/spi/predicate/SortedRangeSet.java	2016-03-07 16:46:04.000000000 -0500
@@ -135,6 +135,12 @@
     }
 
     @Override
+    public boolean isAny()
+    {
+        return false;
+    }
+
+    @Override
     public boolean isAll()
     {
         return lowIndexedRanges.size() == 1 && lowIndexedRanges.values().iterator().next().isAll();
diff -ruBw ../presto/presto-spi/src/main/java/com/facebook/presto/spi/predicate/ValueSet.java ../presto-spi/src/main/java/com/facebook/presto/spi/predicate/ValueSet.java
--- ../presto/presto-spi/src/main/java/com/facebook/presto/spi/predicate/ValueSet.java	2016-03-17 10:54:47.000000000 -0400
+++ ../presto-spi/src/main/java/com/facebook/presto/spi/predicate/ValueSet.java	2016-03-07 16:46:04.000000000 -0500
@@ -30,6 +30,7 @@
         @JsonSubTypes.Type(value = EquatableValueSet.class, name = "equatable"),
         @JsonSubTypes.Type(value = SortedRangeSet.class, name = "sortable"),
         @JsonSubTypes.Type(value = AllOrNoneValueSet.class, name = "allOrNone"),
+        @JsonSubTypes.Type(value = AnyValueSet.class, name = "any"),
 })
 public interface ValueSet
 {
@@ -55,6 +56,14 @@
         return AllOrNoneValueSet.all(type);
     }
 
+    static ValueSet any(Type type, Object first, Object... rest)
+    {
+        if (type.isComparable()) {
+            return AnyValueSet.of(type, first, rest);
+        }
+        throw new IllegalArgumentException("Cannot create discrete ValueSet with non-comparable type: " + type);
+    }
+
     static ValueSet of(Type type, Object first, Object... rest)
     {
         if (type.isOrderable()) {
@@ -93,6 +102,8 @@
 
     boolean isNone();
 
+    boolean isAny();
+
     boolean isAll();
 
     boolean isSingleValue();
